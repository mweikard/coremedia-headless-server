package com.coremedia.caas.server.controller.caas;

import com.coremedia.caas.server.controller.base.ResponseStatusException;
import com.coremedia.caas.server.service.request.ClientIdentification;
import com.coremedia.caas.service.repository.RootContext;
import com.coremedia.caas.service.security.AccessControlViolation;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.ServletWebRequest;

import java.util.Map;

@RestController
@RequestMapping("/caas/v1/{tenantId}/sites/{siteId}")
@Api(value = "/caas/v1/{tenantId}/sites/{siteId}", tags = "Content", description = "Operations for content objects")
public class ContentViewController extends AbstractCaasController {

  @SuppressWarnings("WeakerAccess")
  public static final String HANDLER_NAME_SITE_QUERY = "siteQuery";
  @SuppressWarnings("WeakerAccess")
  public static final String HANDLER_NAME_SITE_QUERY_WITH_VIEW = "siteQueryWithView";
  @SuppressWarnings("WeakerAccess")
  public static final String HANDLER_NAME_CONTENT_QUERY = "contentQuery";
  @SuppressWarnings("WeakerAccess")
  public static final String HANDLER_NAME_CONTENT_QUERY_WITH_VIEW = "contentQueryWithView";


  public ContentViewController() {
    super("caas.server.content.requests");
  }


  private Object execute(String tenantId, String siteId, String queryName, String targetId, String viewName, ServletWebRequest request) {
    try {
      RootContext rootContext;
      if (targetId == null) {
        rootContext = resolveRootContext(tenantId, siteId, request);
      }
      else {
        rootContext = resolveRootContext(tenantId, siteId, targetId, request);
      }
      // determine client
      ClientIdentification clientIdentification = resolveClient(rootContext, request);
      String clientId = clientIdentification.getId().toString();
      String definitionName = clientIdentification.getDefinitionName();
      // determine query arguments
      Map<String, Object> queryArgs = getQueryArgs(request);
      // initialize expression evaluator
      serviceRegistry.getExpressionEvaluator().init(queryArgs);
      // run query
      return execute(() -> executeQuery(tenantId, siteId, rootContext, clientIdentification, queryName, viewName, queryArgs, request), "tenant", tenantId, "site", siteId, "client", clientId, "pd", definitionName, "query", queryName, "view", viewName);
    } catch (AccessControlViolation e) {
      return handleError(e, request);
    } catch (ResponseStatusException e) {
      return handleError(e, request);
    } catch (Exception e) {
      return handleError(e, request);
    }
  }


  @RequestMapping(name = HANDLER_NAME_SITE_QUERY, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Site.Query",
          notes = "Run the GraphQL query with name \"sites\" and view \"default\" on the requested site indicator.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query for the site indicator and default view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           ServletWebRequest request) {
    return execute(tenantId, siteId, "sites", null, "default", request);
  }

  @RequestMapping(name = HANDLER_NAME_SITE_QUERY_WITH_VIEW, value = "/{viewName}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Site.QueryWithView",
          notes = "Run the GraphQL query with name \"sites\" and given view on the requested site indicator.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query for the site indicator and given view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query view", required = true) @PathVariable String viewName,
                           ServletWebRequest request) {
    return execute(tenantId, siteId, "sites", null, viewName, request);
  }

  @RequestMapping(name = HANDLER_NAME_CONTENT_QUERY, value = "/{queryName}/{targetId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Content.Query",
          notes = "Run the GraphQL query with given name and view \"default\" on the requested content object.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query with the given name and default view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query name", required = true) @PathVariable String queryName,
                           @ApiParam(value = "The content's numeric ID or alias", required = true) @PathVariable String targetId,
                           ServletWebRequest request) {
    return execute(tenantId, siteId, queryName, targetId, "default", request);
  }

  @RequestMapping(name = HANDLER_NAME_CONTENT_QUERY_WITH_VIEW, value = "/{queryName}/{targetId}/{viewName}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Content.QueryWithView",
          notes = "Run the GraphQL query with given name and view on the requested content object.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No content with the given name or alias or no query with the given name and view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query name", required = true) @PathVariable String queryName,
                           @ApiParam(value = "The content's numeric ID or alias", required = true) @PathVariable String targetId,
                           @ApiParam(value = "The requested query view", required = true) @PathVariable String viewName,
                           ServletWebRequest request) {
    return execute(tenantId, siteId, queryName, targetId, viewName, request);
  }
}
